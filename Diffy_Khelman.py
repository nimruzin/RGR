import random
import linecache

# Функция кодирования
def encode_Diffy(message):
    encoded_text = ""

    # a = int(input("Введите публичный ключ: "))

    a = 123

    s = message

    # Задаем параметры протокола
    p = 1003  # простое число
    g = 234  # основание

    # Сторона A генерирует свой приватный ключ

    # Сторона B генерирует свой приватный ключ
    b = 345
    # Сторона A вычисляет свой публичный ключ
    A_1 = pow(g, a)
    A = A_1 % p

    # Сторона B вычисляет свой публичный ключ
    B_1 = pow(g, b)
    B = B_1 % p

    # Обе стороны вычисляют общий секретный ключ
    kA_1 = pow(B, a)
    kA = kA_1 % p
    kB_1 = pow(A, b)
    kB = kB_1 % p

    # Проверяем, что общие секретные ключи совпадают
    if kA == kB:
        for i in range(len(s)):  # проходим по каждому символу строки
            c = chr(ord(s[i]) + kA)  # каждый символ сдвигаем на размер ключа
            s = s[:i] + c + s[i + 1:]

    return s

# Функция декодирования

def decode_Diffy(message):
    a = 123
    
    decoded_text = ""

    s = message

    p = 1003

    g = 234

    b = 345

    B_1 = pow(g, b)
    B = B_1 % p

    kA_1 = pow(B, a)
    kA = kA_1 % p

    

    # # Сторона A вычисляет свой публичный ключ
    # A_1 = pow(g, a)
    # A = A_1 % p
    #
    # # Сторона B вычисляет свой публичный ключ
    # B_1 = pow(g, b)
    # B = B_1 % p
    #
    # # Обе стороны вычисляют общий секретный ключ
    # kA_1 = pow(B, a)
    # kA = kA_1 % p
    # kB_1 = pow(A, b)
    # kB = kB_1 % p

    # Проверяем, что общие секретные ключи совпадают
    for i in range(len(s)):  # проходим по каждому символу строки
        c = chr(ord(s[i]) - kA)  # каждый символ сдвигаем на размер ключа
        s = s[:i] + c + s[i + 1:]

    return s
